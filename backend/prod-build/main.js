/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('(__webpack_require__(/*! dotenv */ "dotenv").config)();\nconst stripe = __webpack_require__(/*! stripe */ "stripe")(\'sk_test_51LD42cSJb05mAKIhulGhSsRo6e7v8OAA4IdkNBkCQPwIacUSOFybWXogCp3m1aDJ3CGrKvsPIk6gS2hGGJbAwjjN00LEG1yqfb\');\nconst express = __webpack_require__(/*! express */ "express");\nconst bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");\nconst cors = __webpack_require__(/*! cors */ "cors");\nconst app = express();\napp.use(cors());\nvar nodemailer = __webpack_require__(/*! nodemailer */ "nodemailer");\napp.use(express.static(\'public\'));\nconst mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst User = __webpack_require__(/*! ./models/users */ "./models/users.js");\nconst Otp = __webpack_require__(/*! ./models/otp */ "./models/otp.js");\nconst Insta_accounts = __webpack_require__(/*! ./models/insta_accounts */ "./models/insta_accounts.js");\nconst Following = __webpack_require__(/*! ./models/following */ "./models/following.js");\nvar fs = __webpack_require__(/*! fs */ "fs");\nvar path = __webpack_require__(/*! path */ "path");\nvar bodyParser = __webpack_require__(/*! body-parser */ "body-parser");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\nconst {\n  rmSync\n} = __webpack_require__(/*! fs */ "fs");\nvar imgModel = __webpack_require__(/*! ./models/users */ "./models/users.js");\nconst jwtKey = "hawkeye_pamsar";\nvar jsonParser = bodyParser.json();\nvar validator = __webpack_require__(/*! email-validator */ "email-validator");\nmongoose.connect(process.env.connecting_string, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log("connected");\n});\napp.post(\'/send_email\', verifyToken, jsonParser, (req, res) => {\n  if (req.body.sub === "purchased") {\n    var transporter = nodemailer.createTransport({\n      service: \'gmail\',\n      auth: {\n        user: \'qa.pamsar@gmail.com\',\n        pass: \'tsjfvhxxgsibzayh\'\n      }\n    });\n    var mailOptions = {\n      from: \'qa.pamsar@gmail.com\',\n      to: req.body.email,\n      subject: \'Payment made in Hawkeye\',\n      text: `Made a payment of $19 in Hawkeye and purchased the freelancer plan`\n    };\n    transporter.sendMail(mailOptions, function (error, info) {\n      if (error) {\n        console.log(error);\n        res.send({\n          \'msg\': \'Email Sent Unsuccessfully\'\n        });\n      } else {\n        console.log(\'Email sent: \' + info.response);\n        res.send({\n          \'msg\': \'Email Sent Successfully\'\n        });\n      }\n    });\n  } else {\n    var transporter = nodemailer.createTransport({\n      service: \'gmail\',\n      auth: {\n        user: \'qa.pamsar@gmail.com\',\n        pass: \'tsjfvhxxgsibzayh\'\n      }\n    });\n    var mailOptions = {\n      from: \'qa.pamsar@gmail.com\',\n      to: req.body.email,\n      subject: \'Payment made in Hawkeye\',\n      text: `You have cancelled your subscription plan successfully on Hawkeye`\n    };\n    transporter.sendMail(mailOptions, function (error, info) {\n      if (error) {\n        console.log(error);\n        res.send({\n          \'msg\': \'Email Sent Unsuccessfully\'\n        });\n      } else {\n        console.log(\'Email sent: \' + info.response);\n        res.send({\n          \'msg\': \'Email Sent Successfully\'\n        });\n      }\n    });\n  }\n});\nconst multer = __webpack_require__(/*! multer */ "multer");\nconst {\n  json\n} = __webpack_require__(/*! express */ "express");\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \'uploads\');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname));\n    console.log("orignal name=", file.originalname);\n  }\n});\nvar upload = multer({\n  storage: storage\n});\napp.post(\'/user_details\', verifyToken, jsonParser, (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    res.send({\n      "user_details": data\n    });\n  });\n});\napp.post(\'/update_profile_image\', verifyToken, jsonParser, upload.single(\'image\'), (req, res, next) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (req.file.filename) {\n      await User.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          updated_profile_img: {\n            data: fs.readFileSync(path.join(__dirname + \'/uploads/\' + req.file.filename)),\n            contentType: \'image/png\'\n          }\n        }\n      });\n      res.send({\n        "msg": "Profile image updated Successfull"\n      });\n    } else {\n      res.send({\n        "msg": "Profile image not updated"\n      });\n    }\n  });\n});\napp.post(\'/update_profile\', verifyToken, jsonParser, (req, res, next) => {\n  console.log("file name=", req.body.email);\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    await User.updateOne({\n      email: req.body.email\n    }, {\n      $set: {\n        location: req.body.location,\n        occupation: req.body.occupation,\n        fname: req.body.first_name,\n        lname: req.body.last_name,\n        about_me: req.body.about_me,\n        website: req.body.website\n      }\n    });\n    res.send({\n      "msg": "Profile updated Successfull",\n      "email": req.body.email\n    });\n  });\n});\napp.post(\'/create_otp_collection\', verifyToken, jsonParser, async (req, res) => {\n  Otp.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      res.send({\n        "msg": "new otp collection cannot be created because this email already exists in the collection"\n      });\n    } else {\n      const create_otp_collection = new Otp({\n        email: req.body.email,\n        otp: ""\n      });\n      create_otp_collection.save().then(result => {\n        console.log("result", result);\n        res.status(201).send({\n          "msg": "Otp Collection Created successfully"\n        });\n      }).catch(err => console.log(err));\n    }\n  });\n});\napp.post(\'/send_update_otp\', jsonParser, async (req, res) => {\n  let check_email = validator.validate(req.body.email);\n  if (check_email === true) {\n    Otp.findOne({\n      email: req.body.email\n    }).then(async data => {\n      if (data) {\n        var transporter = nodemailer.createTransport({\n          service: \'gmail\',\n          auth: {\n            user: \'qa.pamsar@gmail.com\',\n            pass: \'tsjfvhxxgsibzayh\'\n          }\n        });\n        var mailOptions = {\n          from: \'qa.pamsar@gmail.com\',\n          to: req.body.email,\n          subject: \'OTP for Hawkeye\',\n          text: `This is the otp to change your password ` + req.body.otp + ` the otp will expire after 1 minute`\n        };\n        transporter.sendMail(mailOptions, function (error, info) {\n          if (error) {\n            console.log(error);\n            res.send({\n              \'msg\': \'Email Sent Unsuccessfully\'\n            });\n          } else {\n            console.log(\'Email sent: \' + info.response);\n            res.send({\n              \'msg\': \'Email Sent Successfully\'\n            });\n          }\n        });\n        await Otp.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            otp: req.body.otp\n          }\n        });\n      } else {\n        res.send({\n          "msg": "No such email id exists with us."\n        });\n      }\n    });\n  } else {\n    res.send({\n      error: "Invalid email"\n    });\n  }\n});\napp.post(\'/expire_otp\', jsonParser, async (req, res) => {\n  Otp.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      await Otp.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          otp: ""\n        }\n      });\n    } else {\n      res.send({\n        "msg": "No such email id exists with us."\n      });\n    }\n  });\n});\napp.post(\'/new_password\', jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(data => {\n    if (data) {\n      var password = req.body.password;\n      var hashedPassword;\n      // Encryption of the string password\n      bcrypt.genSalt(10, function (err, Salt) {\n        // The bcrypt is used for encrypting password.\n        bcrypt.hash(password, Salt, async function (err, hash) {\n          if (err) {\n            console.log(\'Cannot encrypt\');\n          }\n          hashedPassword = hash;\n          console.log("hash", hash);\n          await User.updateOne({\n            email: req.body.email\n          }, {\n            $set: {\n              password: hashedPassword\n            }\n          });\n          res.send({\n            "msg": "Password changed successfully"\n          });\n        });\n      });\n    } else {\n      res.status(200).send({\n        "msg": "No such Email exists with us"\n      });\n    }\n  });\n});\napp.post(\'/get_otp\', jsonParser, async (req, res) => {\n  Otp.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      if (data.otp === "") {\n        res.send({\n          "msg": "OTP expired"\n        });\n      } else {\n        res.send({\n          "msg": data.otp\n        });\n      }\n    } else {\n      res.send({\n        "msg": "No such email id exists with us."\n      });\n    }\n  });\n});\napp.post(\'/create-checkout-session\', verifyToken, jsonParser, async (req, res) => {\n  const session = await stripe.checkout.sessions.create({\n    success_url: process.env.success_url,\n    cancel_url: process.env.cancel_url,\n    line_items: [{\n      price: req.body.price_id,\n      quantity: 1\n    }],\n    mode: \'subscription\'\n  });\n  console.log("session", session);\n  res.send({\n    "payment_url": session.url\n  });\n});\napp.post(\'/get_cust_id\', verifyToken, jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    console.log("get customer id::", data);\n    res.send({\n      "msg": "Subscription cancelled successfully"\n    });\n  });\n});\napp.post(\'/save_cust_id\', verifyToken, jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      await User.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          cust_id: req.body.ci\n        }\n      });\n    }\n  });\n});\napp.post(\'/list_subscription\', verifyToken, jsonParser, async (req, res) => {\n  let stripeSub = await stripe.subscriptions.list({\n    customer: req.body.ci\n  });\n  res.send(stripeSub);\n});\napp.post(\'/save_subscription_id\', verifyToken, jsonParser, async (req, res) => {\n  await User.updateOne({\n    email: req.body.email\n  }, {\n    $set: {\n      sub_id: req.body.sub_id\n    }\n  });\n  res.send({\n    "msg": "subscription id saved successfully"\n  });\n});\napp.get(\'/payment_lists\', verifyToken, async (req, res) => {\n  const paymentIntents = await stripe.paymentIntents.list({});\n  res.send(paymentIntents);\n});\napp.post(\'/customer_details\', verifyToken, jsonParser, async (req, res) => {\n  const customer = await stripe.customers.retrieve(req.body.customer);\n  res.send(customer);\n});\napp.post(\'/save_subscription\', verifyToken, jsonParser, async (req, res) => {\n  let suscribed_plan = "Null";\n  if (req.body.amount === 1900) {\n    console.log("email", req.body.email);\n    console.log("amount", req.body.amount);\n    suscribed_plan = "Freelancer";\n    console.log(suscribed_plan);\n  } else if (req.body.amount === 2400) {\n    suscribed_plan = "Agency";\n  } else if (req.body.amount === 3400) {\n    suscribed_plan = "Enterprise";\n  }\n  await User.updateOne({\n    email: req.body.email\n  }, {\n    $set: {\n      plan: suscribed_plan\n    }\n  });\n  res.send({\n    "suscription": "success"\n  });\n});\napp.post(\'/check_allocation\', verifyToken, jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      res.send({\n        msg: \'allocation present\'\n      });\n    } else {\n      res.send({\n        msg: \'No allocation is there\'\n      });\n    }\n  });\n});\napp.post(\'/cancel_subscription\', verifyToken, jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    console.log("subscription id::", data.sub_id);\n    const deleted = await stripe.subscriptions.del(data.sub_id);\n    await User.updateOne({\n      email: req.body.email\n    }, {\n      $set: {\n        plan: "Null",\n        sub_id: ""\n      }\n    });\n    Insta_accounts.findOneAndDelete({\n      email: req.body.email\n    }, function (err, docs) {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log("Deleted User : ", docs);\n      }\n    });\n    res.send({\n      "msg": "Subscription cancelled successfully"\n    });\n  });\n});\napp.post(\'/get_plans\', verifyToken, jsonParser, function (req, res) {\n  User.findOne({\n    email: req.body.email\n  }).then(data => {\n    if (data) {\n      res.send({\n        "plan": data.plan\n      });\n    }\n    if (!data) {\n      res.send({\n        "msg": "No such email exists with hawkeye"\n      });\n    }\n  });\n});\napp.post(\'/get-profile-image\', verifyToken, jsonParser, async (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      if (!data.updated_profile_img.data.data) {\n        return res.send(data.updated_profile_img);\n      } else {\n        return res.send({\n          "updated_profile_image": data.updated_profile_img\n        });\n      }\n    } else {\n      return res.status(400).json({\n        "msg": "No such user found"\n      });\n    }\n  });\n});\napp.post(\'/customer_details\', verifyToken, jsonParser, async (req, res) => {\n  const customer = await stripe.customers.retrieve(req.body.customer);\n  res.send(customer);\n});\napp.get(\'/logout\', verifyToken, jsonParser, function (req, res) {\n  console.log("log out from frontend");\n  const bearerHeader = req.headers[\'authorization\'];\n  const bearer = bearerHeader.split(\' \');\n  User.findOne({\n    token: bearer[1]\n  }).then(async data => {\n    if (data) {\n      console.log("data", data);\n      await User.updateOne({\n        email: data.email\n      }, {\n        $set: {\n          token: ""\n        }\n      });\n      res.status(200).send({\n        "msg": "Logout Successfull"\n      });\n    } else {\n      res.status(400).send({\n        "error": "No such token found"\n      });\n    }\n  });\n});\napp.post(\'/login\', jsonParser, function (req, res) {\n  User.findOne({\n    email: req.body.email\n  }).then(data => {\n    //console.log("data",data.password)\n    if (data) {\n      bcrypt.compare(req.body.password, data.password, async function (err, isMatch) {\n        // Comparing the original password to\n        // encrypted password   \n        if (isMatch) {\n          const user_data = {\n            email: req.body.email,\n            password: req.body.password\n          };\n          console.log("data", data);\n          jwt.sign({\n            user_data\n          }, jwtKey, {\n            expiresIn: \'30000s\'\n          }, async (err, jwt_token) => {\n            await User.updateOne({\n              email: req.body.email\n            }, {\n              $set: {\n                token: jwt_token\n              }\n            });\n            res.status(200).send({\n              "msg": "Login Successfull",\n              "jwt": jwt_token\n            });\n          });\n        }\n        if (!isMatch) {\n          res.status(400).send({\n            "msg": "EmailID and Password Does\'nt Match"\n          });\n        }\n      });\n    } else {\n      res.status(200).send({\n        "msg": "Email not registered with us."\n      });\n    }\n  });\n});\napp.post(\'/register\', jsonParser, function (req, res) {\n  let check_email = validator.validate(req.body.email);\n  if (check_email === true) {\n    User.findOne({\n      email: req.body.email\n    }).then(data => {\n      if (data) {\n        res.status(200).send({\n          "msg": "Email already exists"\n        });\n      } else {\n        var password = req.body.password;\n        var hashedPassword;\n        // Encryption of the string password\n        bcrypt.genSalt(10, function (err, Salt) {\n          // The bcrypt is used for encrypting password.\n          bcrypt.hash(password, Salt, function (err, hash) {\n            if (err) {\n              console.log(\'Cannot encrypt\');\n            }\n            hashedPassword = hash;\n            console.log("hash", hash);\n            const data = new User({\n              fname: req.body.fname,\n              lname: req.body.lname,\n              email: req.body.email,\n              password: hashedPassword,\n              location: "",\n              occupation: "",\n              website: "",\n              about_me: "",\n              token: "0",\n              plan: "Null",\n              sub_id: "",\n              cust_id: "",\n              updated_profile_img: {\n                data: "",\n                contentType: \'image/png\'\n              }\n            });\n            data.save().then(result => {\n              console.log("result", result);\n              res.status(201).send({\n                "msg": "registration successfull"\n              });\n            }).catch(err => console.log(err));\n          });\n        });\n      }\n    });\n  } else {\n    res.send({\n      error: "Invalid email"\n    });\n  }\n});\napp.post(\'/get_insta_accounts\', verifyToken, jsonParser, (req, res) => {\n  Insta_accounts.findOne({\n    email: req.body.email\n  }).then(async data => {\n    res.send({\n      "data from get insta accounts": data\n    });\n  });\n});\napp.post(\'/fill_insta_accounts\', verifyToken, jsonParser, (req, res) => {\n  Insta_accounts.findOne({\n    email: req.body.email\n  }).then(async data => {\n    if (data) {\n      console.log("data from database::", data);\n      if (data.ig_id_1 === "") {\n        console.log("updated ig id 1e");\n        await Insta_accounts.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            ig_id_1: req.body.ig_id,\n            access_token_1: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_1 === req.body.ig_id) {\n        console.log("updated ig id 1");\n        await Insta_accounts.updateOne({\n          email: req.body.email,\n          ig_id_1: req.body.ig_id\n        }, {\n          $set: {\n            access_token_1: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_2 === "") {\n        console.log("updated ig id 2e");\n        await Insta_accounts.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            ig_id_2: req.body.ig_id,\n            access_token_2: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_2 === req.body.ig_id) {\n        console.log("updated ig id 2");\n        await Insta_accounts.updateOne({\n          email: req.body.email,\n          ig_id_2: req.body.ig_id\n        }, {\n          $set: {\n            access_token_2: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_3 === "") {\n        console.log("updated ig id 3e");\n        await Insta_accounts.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            ig_id_3: req.body.ig_id,\n            access_token_3: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_3 === req.body.ig_id) {\n        console.log("updated ig id 3");\n        await Insta_accounts.updateOne({\n          email: req.body.email,\n          ig_id_3: req.body.ig_id\n        }, {\n          $set: {\n            access_token_3: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_4 !== "") {\n        console.log("updated ig id 4e");\n        await Insta_accounts.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            ig_id_4: req.body.ig_id,\n            access_token_4: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_4 === req.body.ig_id) {\n        console.log("updated ig id 4");\n        await Insta_accounts.updateOne({\n          email: req.body.email,\n          ig_id_4: req.body.ig_id\n        }, {\n          $set: {\n            access_token_4: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_5 === "") {\n        console.log("updated ig id 5e");\n        await Insta_accounts.updateOne({\n          email: req.body.email\n        }, {\n          $set: {\n            ig_id_5: req.body.ig_id,\n            access_token_5: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else if (data.ig_id_5 === req.body.ig_id) {\n        console.log("updated ig id 5");\n        await Insta_accounts.updateOne({\n          email: req.body.email,\n          ig_id_5: req.body.ig_id\n        }, {\n          $set: {\n            access_token_5: req.body.access_token\n          }\n        });\n        res.send({\n          "msg": "Successfully filled insta accounts"\n        });\n      } else {\n        res.send({\n          "msg": "Trying to connect to a sixth account upgrade plan"\n        });\n      }\n    }\n  });\n});\napp.post(\'/space_for_insta_accounts\', verifyToken, jsonParser, (req, res) => {\n  Insta_accounts.findOne({\n    email: req.body.email\n  }).then(data1 => {\n    if (data1) {\n      res.send({\n        "msg": "Insta Accounts allocation already created"\n      });\n    } else {\n      User.findOne({\n        email: req.body.email\n      }).then(data => {\n        if (data) {\n          const data = new Insta_accounts({\n            email: req.body.email,\n            ig_id_1: "",\n            access_token_1: "",\n            ig_id_2: "",\n            access_token_2: "",\n            ig_id_3: "",\n            access_token_3: "",\n            ig_id_4: "",\n            access_token_4: "",\n            ig_id_5: "",\n            access_token_5: ""\n          });\n          data.save().then(result => {\n            console.log("result", result);\n            res.status(201).send({\n              "msg": "insta accounts allottion created successfully"\n            });\n          }).catch(err => console.log(err));\n        } else {\n          res.send({\n            "msg": "No such email id exists with hawkeye"\n          });\n        }\n      });\n    }\n  });\n});\napp.post(\'/user_current_plan\', verifyToken, jsonParser, (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(async data => {\n    console.log("data=", data);\n    res.send({\n      "user_current_plan": data\n    });\n  });\n});\napp.get(\'/users\', verifyToken, function (req, res) {\n  User.find().then(result => {\n    res.status(200).json(result);\n  });\n});\napp.post(\'/get_following\', verifyToken, jsonParser, (req, res) => {\n  Following.findOne({\n    user_id: req.body.id\n  }).then(async data => {\n    if (data) {\n      res.send(data);\n    } else {\n      res.send({\n        "msg": "No data found"\n      });\n    }\n  });\n});\napp.post(\'/save_following\', verifyToken, jsonParser, async (req, res) => {\n  Following.findOne({\n    user_id: req.body.id\n  }).then(async data => {\n    console.log("data", data);\n    if (!data) {\n      const data = new Following({\n        user_id: req.body.id,\n        following_day1: 0,\n        following_day2: 0,\n        following_day3: 0,\n        following_day4: 0,\n        following_day5: 0,\n        following_day6: 0,\n        following_day7: 0,\n        following_day8: 0,\n        following_day9: 0,\n        following_day10: 0,\n        following_day11: 0,\n        following_day12: 0,\n        following_day13: 0,\n        following_day14: 0,\n        following_day15: 0,\n        following_day16: 0,\n        following_day17: 0,\n        following_day18: 0,\n        following_day19: 0,\n        following_day20: 0,\n        following_day21: 0,\n        following_day22: 0,\n        following_day23: 0,\n        following_day24: 0,\n        following_day25: 0,\n        following_day26: 0,\n        following_day27: 0,\n        following_day28: 0,\n        following_day29: 0,\n        following_day30: req.body.f_change,\n        total_following: req.body.total,\n        following_previous_month: 0\n      });\n      data.save().then(result => {\n        console.log("result", result);\n        res.status(201).send({\n          "msg": "Folling saved Successfully"\n        });\n      }).catch(err => console.log(err));\n    } else {\n      console.log("req body", req.body);\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day1: req.body.f2\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day2: req.body.f3\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day3: req.body.f4\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day4: req.body.f5\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day5: req.body.f6\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day6: req.body.f7\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day7: req.body.f8\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day8: req.body.f9\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day9: req.body.f10\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day10: req.body.f11\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day11: req.body.f12\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day12: req.body.f13\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day13: req.body.f14\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day14: req.body.f15\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day15: req.body.f16\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day16: req.body.f17\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day17: req.body.f18\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day18: req.body.f19\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day19: req.body.f20\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day20: req.body.f21\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day21: req.body.f22\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day22: req.body.f23\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day23: req.body.f24\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day24: req.body.f25\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day25: req.body.f26\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day26: req.body.f27\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day27: req.body.f28\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day28: req.body.f29\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day29: req.body.f30\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_day30: req.body.f_change\n        }\n      });\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          total_following: req.body.total\n        }\n      });\n      data.save().then(result => {\n        console.log("result", result);\n        res.status(201).send({\n          "msg": "Folling updated Successfully"\n        });\n      }).catch(err => console.log(err));\n    }\n  });\n});\napp.post(\'/save_following_month_p\', verifyToken, jsonParser, async (req, res) => {\n  console.log("id", req.body.id);\n  Following.findOne({\n    user_id: req.body.id\n  }).then(async data => {\n    console.log("data", data);\n    if (data) {\n      console.log("req body", req.body);\n      await Following.updateOne({\n        user_id: req.body.id\n      }, {\n        $set: {\n          following_previous_month: req.body.following_previous_month\n        }\n      });\n      data.save().then(result => {\n        console.log("result", result);\n        res.status(201).send({\n          "msg": "Following previous month updated Successfully"\n        });\n      }).catch(err => console.log(err));\n    }\n  });\n});\napp.post(\'/edit_name\', verifyToken, jsonParser, async (req, res) => {\n  if (req.body.edit_for === "account_1") {\n    Insta_accounts.findOne({\n      email: req.body.email\n    }).then(async data => {\n      await Insta_accounts.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          account_1: req.body.name\n        }\n      });\n      res.send({\n        "msg": "name updated successfully"\n      });\n    });\n  }\n  if (req.body.edit_for === "account_2") {\n    Insta_accounts.findOne({\n      email: req.body.email\n    }).then(async data => {\n      await Insta_accounts.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          account_2: req.body.name\n        }\n      });\n      res.send({\n        "msg": "name updated successfully"\n      });\n    });\n  }\n  if (req.body.edit_for === "account_3") {\n    Insta_accounts.findOne({\n      email: req.body.email\n    }).then(async data => {\n      await Insta_accounts.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          account_3: req.body.name\n        }\n      });\n      res.send({\n        "msg": "name updated successfully"\n      });\n    });\n  }\n  if (req.body.edit_for === "account_4") {\n    Insta_accounts.findOne({\n      email: req.body.email\n    }).then(async data => {\n      await Insta_accounts.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          account_4: req.body.name\n        }\n      });\n      res.send({\n        "msg": "name updated successfully"\n      });\n    });\n  }\n  if (req.body.edit_for === "account_5") {\n    Insta_accounts.findOne({\n      email: req.body.email\n    }).then(async data => {\n      await Insta_accounts.updateOne({\n        email: req.body.email\n      }, {\n        $set: {\n          account_5: req.body.name\n        }\n      });\n    });\n    res.send({\n      "msg": "name updated successfully"\n    });\n  }\n});\nfunction verifyToken(req, res, next) {\n  const bearerHeader = req.headers[\'authorization\'];\n  console.log("Bearer Header", bearerHeader);\n  if (typeof bearerHeader !== \'undefined\') {\n    const bearer = bearerHeader.split(\' \');\n    console.log(bearer[1]);\n    req.token = bearer[1];\n    jwt.verify(req.token, jwtKey, (err, authData) => {\n      if (err) {\n        res.status(401).json({\n          "error": err\n        });\n      } else {\n        next();\n      }\n    });\n  } else {\n    res.status(401).send({\n      "error": "Token not provided"\n    });\n  }\n}\napp.listen(5000, () => {\n  console.log("app is running on port 5000");\n});\n\n//# sourceURL=webpack:///./index.js?')},"./models/following.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("const mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nlet followingSchema = new mongoose.Schema({\n  user_id: String,\n  following_day1: Number,\n  following_day2: Number,\n  following_day3: Number,\n  following_day4: Number,\n  following_day5: Number,\n  following_day6: Number,\n  following_day7: Number,\n  following_day8: Number,\n  following_day9: Number,\n  following_day10: Number,\n  following_day11: Number,\n  following_day12: Number,\n  following_day13: Number,\n  following_day14: Number,\n  following_day15: Number,\n  following_day16: Number,\n  following_day17: Number,\n  following_day18: Number,\n  following_day19: Number,\n  following_day20: Number,\n  following_day21: Number,\n  following_day22: Number,\n  following_day23: Number,\n  following_day24: Number,\n  following_day25: Number,\n  following_day26: Number,\n  following_day27: Number,\n  following_day28: Number,\n  following_day29: Number,\n  following_day30: Number,\n  total_following: Number,\n  following_previous_month: Number\n});\nmodule.exports = mongoose.model('following', followingSchema);\n\n//# sourceURL=webpack:///./models/following.js?")},"./models/insta_accounts.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("const mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nlet insta_accountsSchema = new mongoose.Schema({\n  email: String,\n  account_1: String,\n  ig_id_1: String,\n  access_token_1: String,\n  account_2: String,\n  ig_id_2: String,\n  access_token_2: String,\n  account_3: String,\n  ig_id_3: String,\n  access_token_3: String,\n  account_4: String,\n  ig_id_4: String,\n  access_token_4: String,\n  ig_id_5: String,\n  account_5: String,\n  access_token_5: String\n});\nmodule.exports = mongoose.model('insta_accounts', insta_accountsSchema);\n\n//# sourceURL=webpack:///./models/insta_accounts.js?")},"./models/otp.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("const mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nlet otpSchema = new mongoose.Schema({\n  email: String,\n  otp: String\n});\nmodule.exports = mongoose.model('otps', otpSchema);\n\n//# sourceURL=webpack:///./models/otp.js?")},"./models/users.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("const mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nlet userSchema = new mongoose.Schema({\n  fname: String,\n  lname: String,\n  email: String,\n  password: String,\n  location: String,\n  occupation: String,\n  website: String,\n  about_me: String,\n  token: String,\n  plan: String,\n  sub_id: String,\n  cust_id: String,\n  updated_profile_img: {\n    data: Buffer,\n    contentType: String\n  }\n});\nmodule.exports = mongoose.model('users', userSchema);\n\n//# sourceURL=webpack:///./models/users.js?")},bcryptjs:n=>{"use strict";n.exports=require("bcryptjs")},"body-parser":n=>{"use strict";n.exports=require("body-parser")},cors:n=>{"use strict";n.exports=require("cors")},dotenv:n=>{"use strict";n.exports=require("dotenv")},"email-validator":n=>{"use strict";n.exports=require("email-validator")},express:n=>{"use strict";n.exports=require("express")},jsonwebtoken:n=>{"use strict";n.exports=require("jsonwebtoken")},mongoose:n=>{"use strict";n.exports=require("mongoose")},multer:n=>{"use strict";n.exports=require("multer")},nodemailer:n=>{"use strict";n.exports=require("nodemailer")},stripe:n=>{"use strict";n.exports=require("stripe")},fs:n=>{"use strict";n.exports=require("fs")},path:n=>{"use strict";n.exports=require("path")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var s=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](s,s.exports,__webpack_require__),s.exports}var __webpack_exports__=__webpack_require__("./index.js")})();